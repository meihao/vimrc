Install
    #apt-get install python-yaml
    #pip install ansible  
    #git clone git://github.com/ansible/ansible.git
    #cd ansible && make install
Configuration
    inventory 文件用来定义你想控制管理的服务器, 默认配置在/etc/ansible/hosts
    Configuration file has prority sequence.
        ANSIBLE_CONFIG (enviroment path)
        ansible.cfg (current path)
        .ansible.cfg (home path)
        /etc/ansible/ansible.cfg
    add hosts file for ansible
        group
            [group_name1]
            192.168.2.100
            192.168.2.101
            ...
            [group_name2]
            192.168.85.2
        port
            [group_name3]
            10.88.85.90:2222
            10.88.85.123:3333
            ...
        child
            [child1]
            10.0.0.1:2222
            10.0.0.2:3333
            [child2]
            10.0.2.1:3333
            10.0.3.1

            [vps:children]
            child1
            child2
        reg
            [1:3].xxx.org   #= 1.xxx.org, 2.xxx.org, 3.xxx.org
            [a:c].xxx.org   #= a.xxx.org, b.xxx.org, c.xxx.org

Usage
    pattern
    command 
        ansible <pattern_goes_here> -m <module_name> -a <arguments>
        e.g.
        ansible all -m ping          # it's will ping all server in hosts
        ansible 192.168.85.123 -m ping -u tester      # use tester to ping 192.168.85.123
        ansible group_name3 -m ping -u tester  –sudo -K      # use tester to ping group_name3, -K will need root passwd.
    <pattern_goes_here>
        pattern can be one server IP, domain, or hosts groupname, if you want to use multiple group or ip, use colon ":" to split it.
            ip
            ip1:ip2
            domain1:domain2
            group1
            group1:group2:group3
            all
            *            # * = all
            192.168.1.*
             group1:!grop2           # hosts in group1 but not in group2.    !
            group1:&group2        # hosts exists both  gruop1  and group2.   &
            group1[0]                     # group1 first, like python slice, group1[0:100], the exceed result can't be matched
            ~(web|db).*\.example\.com    # regexp
    Ad-Hoc command.  (temporary command, use -a)
        -a  command, -f concurrency, default value is 5, -m choose module.
        run shell
            ansible all -a "/bin/echo hello"         # print hello
            ansible all -a "/sbin/reboot"  -f   10    --sudo  -K     #reboot
            ansible all -m shell -a 'ls -la ~'
        file 
            ansible all -m copy -a "src=~/project/tests/t.py dest=~"                                  # send file
            ansible all -m file -a "dest=~/.t.py mode=777 owner=tester group=tester"                            # modify file 
            ansible all -m file -a "dest=~/tests mode=755 owner=tester group=tester state=diretory"    # create directory
        install
            ansible v1 -m apt -a "name=python-pip state=present" --sudo -K       # install 
            ansible v1 -m apt -a "name=git state=latest"                #install the latest
            ansible v1 -m apt -a "name=git state=absent" --sudo -K        # uninstall if installed.
        user
            ansible all -m user -a "name=foo password=foo" --sudo -K    #adduser
            ansible all -m user -a "name=foo state=absent" --sudo -K     #deluser
        git
             ansible v1 -m git -a "repo=https://github.com/xxxx/xxx.git dest=~/project-dir version=HEAD" #use https checkout. dest shouldnot be exist at first.
        service
            ansible v1 -m service -a "name=mysql state=started" --sudo -K
            ansible v1 -m service -a "name=mysql state=restarted" --sudo -K
            ansible v1 -m service -a "name=mysql state=stopped" --sudo -K 
playbook YAML syntax
        start — as document
        list start , key: value, the space right near the colon(:) is must.  if colon(:) exists in colon, it should be quoted.
        ansible-playbook test.yaml
            ---
            - hosts: {{ servers }}
            tasks:
            - name: Get latest hyve-stress version in PXE server
            command: yum list hyve-stress | grep hyve-stress | awk '{print $2}'
            - name: Get latest hyve-lnxflash version in PXE server
            command: yum list hyve-lnxflash | grep hyve-lnxflash | awk '{print $2}'
            - name: Get latest hyve-testview version in PXE server
            command: yum list hyve-testview | grep hyve-testview | awk '{print $2}'
            - name: Get latest hyve-pxeboot version in PXE server
            command: yum list hyve-pxeboot | grep hyve-pxeboot | awk '{print $2}'
    variable use jinja grammar
        var    k->v
        var_files  list
        --extra-vars 
        global variable will be in group_vars/all
        local variable will be in group_vars/x
        use ansiable-playbok xxx.yml -vv to print variables.
====================================================================
YAML grammar
    ping module 测试远程主机的运行状态
    hosts
        [webserver1]
        site01 ansible_ssh_user=root
        site02 ansible_ssh_user=tester
        site03 ansible_ssh_port=7777
        site04
        site05 ansible_ssh_private_key_file=/key/.ssh/id_ras.pub
        site06 ansible_ssh_user=www
        ping module can test network between client and servers.
        -k means use password
        -sudo tell ansible use sudo to run task, if sudo need password, use -k; or add ask_sudo_pass in ansible.cfg
        -a means use parameters, and parameters is always be Key=value
    setup module收集远程主机的一些基本信息
        ansible -i /etc/ansible/hosts test -m setup
        ansible machineName -u root -k -m setup  #Ansible use root to execute setup module on machineName, it can gather server basic information.
        setup module can use facter/ohai module to gather information, and the result will have prefix "facter_" or "ohai_"

    file module/copy module
        force：需要在两种情况下强制创建软链接，一种是源文件不存在但之后会建立的情况下；另一种是目标软链接已存在,需要先取消之前的软链，然后创建新的软链，有两个选项：yes|no
        group：定义文件/目录的属组
        mode：定义文件/目录的权限
        owner：定义文件/目录的属主
        path：必选项，定义文件/目录的路径
        recurse：递归的设置文件的属性，只对目录有效
        src：要被链接的源文件的路径，只应用于state=link的情况
        dest：被链接到的路径，只应用于state=link的情况
        state：
        directory：如果目录不存在，创建目录
        file：即使文件不存在，也不会被创建
        link：创建软链接
        hard：创建硬链接
        touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间
        absent：删除目录、文件或者取消链接文件

        ansible MachineName -u root -k -m file -a 'path=/etc/fstab'     # Ansible use file module to get/modify/query file information.
            changed	false/true	if file didn't exist or attribute didn't same as expect, it will be ture

        ansible MachineName -u root -k -m copy -a "src=/etc/fstab dest=/tmp/fstab mode=644 owner=root"    # Ansible use copy module to copy file.
            basic information, msg will return the handle

        ansible test -m file -a "src=/etc/fstab dest=/tmp/fstab state=link"
        ansible test -m file -a "path=/tmp/fstab state=absent"
        ansible test -m file -a "path=/tmp/test state=touch"
        ansible test -m file -a "path=/tmp/test state=directory"
        ansible test -m file -a "path=/tmp/testd state=directory owner=root group=root mode=777"


    copy module
        ansible test -m copy -a "src=/srv/myfiles/foo.conf dest=/etc/foo.conf owner=foo group=foo mode=0644"
        ansible test -m copy -a "src=/mine/ntp.conf dest=/etc/ntp.conf owner=root group=root mode=644 backup=yes"
        ansible test -m copy -a "src=/mine/sudoers dest=/etc/sudoers validate='visudo -cf %s'"

    command module/creates/removes attribute.为ansible默认模块,不指定-m参数时,默认就是调用command模块,但是不支持<,>,|,and,&等,也不支持管道
        command module didn't have return value. but can use creates/removes to detect command success or not.
        command module can "execute remote command in server, and can use setup module parameters"
        ansible MachineName -m command -a "rm rfv /tmp/fstab removes=/tmp/fstab" # if not exists, will output "MachineName | skipped" or will return "ansibletest | success | rc=0 >>"
        ansible MachineName -m file -a 'path=/tmp/fstab state=absent'  # use ansbile file module to delete file. 
    shell module 在远程命令通过/bin/sh来执行.
        shell module can deal rewrite/pipeline output/background jobs
        ansible machineName -m shell -a '/opt/bin/test.sh > /data/log/test.log creates=/data/log/test.log'
    scripts module 本地写一个脚本在远程服务器上执行
        ansible myservers -m script -a "/opt/app/target.sh"
    raw module, 类似command, 但是可以传递管道, 就是有些机器没装python,或者是python2.4以下.木有装python-simplejson, 就可以用它装python, 装simplejson
        ansible 10.2.2.2 -a "ls /tmp/" -u root -k
        ansible 10.2.2.2 -m shell -a 'ls /tmp/*' -u root -k
        ansible 10.2.2.2 -m raw -a 'ls /tmp/*' -u root -k

    service module 管理服务
        arguments 给命令行提供一些选项
        enabled:是否开机启动 yes|no
        name: 服务名称
        pattern：定义一个模式，如果通过status指令来查看服务的状态时，没有响应，就会通过ps指令在进程中根据该模式进行查找，如果匹配到，则认为该服务依然在运行
        runlevel：运行级别
        sleep：如果执行了restarted，在则stop和start之间沉睡几秒钟
        state：对当前服务执行启动，停止、重启、重新加载等操作（started,stopped,restarted,reloaded）
        示例：
             ansible test -m service -a "name=httpd state=started enabled=yes"
             ansible test -m service -a "name=foo pattern=/usr/bin/foo state=started"
             ansible test -m service -a "name=network state=restarted args=eth0"
    cron module 用于管理计划任务,包含如下选项：
        backup：对远程主机上的原任务计划内容修改之前做备份
        cron_file：如果指定该选项，则用该文件替换远程主机上的cron.d目录下的用户的任务计划
        day：日（1-31，*，*/2,……）
        hour：小时（0-23，*，*/2，……）
        minute：分钟（0-59，*，*/2，……）
        month：月（1-12，*，*/2，……）
        weekday：周（0-7，*，……）
        job：要执行的任务，依赖于state=present
        name：该任务的描述
        special_time：指定什么时候执行，参数：reboot,yearly,annually,monthly,weekly,daily,hourly
        state：确认该任务计划是创建还是删除
        user：以哪个用户的身份执行
         例：
            ansible test -m cron -a 'name="check dirs" hour="5,2" job="ls -alh > /dev/null"'
            ansible test -m cron -a 'name="a job for reboot" special_time=reboot job="/some/job.sh"'
            ansible test -m cron -a 'name="yum autoupdate" weekday="2" minute=0 hour=12 user="root" job="YUMINTERACTIVE=0 /usr/sbin/yum-autoupdate" cron_file=ansible_yum-autoupdate'
            ansilbe test -m cron -a 'cron_file=ansible_yum-autoupdate state=absent'
    yum module 使用yum包管理器来管理软件包, 选项：
        config_file：yum的配置文件
        disable_gpg_check：关闭gpg_check
        disablerepo：不启用某个源
        enablerepo：启用某个源
        list
        name：要进行操作的软件包的名字，也可以传递一个url或者一个本地的rpm包的路径
        state：状态（present，absent，latest）
        示例：
            ansible test -m yum -a 'name=httpd state=latest'
            ansible test -m yum -a 'name="@Development tools" state=present'
            ansible test -m yum -a 'name=http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm state=present'
    user module 管理用户
        home:
        groups:
        uid
        password:
        name:
        createhome:
        system:
        remove:
        state:
        shell:
        需要特别说明的是，password后面指定的密码不能是明文，后面这一串密码会被直接传送到被管理主机的/etc/shadow文件中，而登陆的时候输入的密码会被hash加密以后再去与/etc/shadow中存放的密码去做对比，会出现不一致的现象。所以需要先将密码字符串进行加密处理：openssl passwd -salt -1 "123456"，然后将得到的字符串放到password中即可。
    group module

    synchronize module 使用rsync同步文件
        archive
        checksum
        delete
        dest
        src
        dest_port
        existing_only: skip createing new files on receiver
        links
        owner
        mode:(push, pull)
        recursive
        rsync_path
        times:Preserve modification times
        示例：
            src=some/relative/path dest=/some/absolute/path rsync_path="sudo rsync"
            src=some/relative/path dest=/some/absolute/path archive=no links=yes
            src=some/relative/path dest=/some/absolute/path checksum=yes times=no
            src=/tmp/helloworld dest=/var/www/helloword rsync_opts=--no-motd,--exclude=.git mode=pull

    mount module 配置挂载点
        dump
        fstype：必选项，挂载文件的类型
        name：必选项，挂载点
        opts：传递给mount命令的参数
        passno
        src：必选项，要挂载的文件
        state：必选项
        present：只处理fstab中的配置
        absent：删除挂载点
        mounted：自动创建挂载点并挂载之
        umounted：卸载
        示例：
            name=/mnt/dvd src=/dev/sr0 fstype=iso9660 opts=ro state=present
            name=/srv/disk src='LABEL=SOME_LABEL' state=present
            name=/home src='UUID=b3e48f45-f933-4c8e-a700-22a159ec9077' opts=noatime state=present

            ansible test -a 'dd if=/dev/zero of=/disk.img bs=4k count=1024'
            ansible test -a 'losetup /dev/loop0 /disk.img'
            ansible test -m filesystem 'fstype=ext4 force=yes opts=-F dev=/dev/loop0'
            ansible test -m mount 'name=/mnt src=/dev/loop0 fstype=ext4 state=mounted opts=rw'

    help
         ansible-doc -l
         ansible-doc file  # get file module help
 --------------------------------------------------
 # xxx.yml
 ---
 - hosts: local   #hosts中指定
   remote_user: root #如果和当前用户一样, 无须指定
     tasks
      -name: whoami
       copy: src=~/hosts dest=~/hosts.dest #本地拷贝到远端
       notify:   #如果copy执行完后~/hosts.dest文件发生了变化,则字号行
         - clear copy # 调用下面handler
     handlers
         在处理执行tasks后服务器发生变化后可供调用的handler
 
    handlers:
      - name: clear copy
       shell: 'mv ~/xxxx.test{,.bak}'
--------------------------------------------------
ansible的变量, 主要是给playbook用的. 分为主机变量和组变量.
# hosts
[alltest:children]
salt
xxx

[salt]
slat-master salt-port=4505 mysql-port=3306      # 主机变量
10.1.2.3 salt-path=/usr/bin/salt-call           # 主机变量

[xxx]
lixc ansible ssh_host=192.168.2.3 ansible_ssh_port=33333
10.22.33.4[1:9]:22
[alltest:vars]
ls-path=/bin/ls                     # 组变量
eee=fortest                         # 组变量

--------------------------------------------------
ansible的patterns.可以用--limit关键字 xxx-hhostname 来排除某一主机
要ansible免密码用私钥登录, ssh-keys 必须要700权限, 同时需要指定ansible.cfg里面
    [defaults]
    transport= paramiko
    [ssh_connection]
    control_path=./ssh_keys
    scp_if_ssh  = True
--------------------------------------------------
ansible AOH在执行命令的时候, 可以用-B 30来设置后台执行时间为30s, -P2 是每两秒报告一次状态.
    ansible test_server -m apt -a "name=apache2 state=installed" -s -B 30 -P2 >> /dev/null #安装apache

    ansible test_server -m user -a "name=mysql state=absent" -s     #删除mysql用户
    ansible test_server -m 
===================================================================
playbook example1.yml

playbook里面的运行的内容, 命令行和ansible的模块是通用的,而且都需要遵循key=value形式
ansible-playbook example1.yml -e "uservar=xxx"  要传递自定义参数,需要用-e
ansible-playbook example1.yml -e "uservar=xxx" --tags init 运行指定tag的task

ansible 命令行参数
-v       --verbose 更多成功输出
-i PATH  --inventory=PATH 指定inventory hosts file
-f NUM   --fokrs=NUM  指定并发数, 默认5个.
--private-key=PRIVATE_KEY_FILE 执行私钥文件
-m NAME  --model-name=NAME 执行module
-M DIRECTORY --model-path=DIRECTORY 指定module load的目录
-a 'ARGUMENTS' --args='ARGUMENTS'   传给module的参数
-k --ask-pass   ssh 登录要密码
-K --ask-sudo-pass  要sudo密码如果需要的话
-o --one-line      输出所有东西在一行上
-s --sudo          run the command as the user given by -u and sudo to root
-t DIRECTORY, --tree=DIRECTORY 把输出保存到这个目录,以每个host命名
-T SECONDS, --timeout=SECONDS  连接超时时间
-B NUM  --background=UM       背景连接超出时间后被杀掉
-P NUM --poll=NUM      拉背景任务每多少秒,需要有-B
-u USERNAME --username=USERNAME  远端用户如果和本地不一样
-U SUDO_USERNAME  --sudo-user=SUDO_USERNAME  远端sudo用户
-c CONNECTION --connection=CONNECTION 连接类型, paramiko(ssh), SSH, and local, local主要对crontab or kickstarts
-l SUBSET --limit=SUBSET   限定主机.排除掉
-l ~REGEX --limit=~REGEX   正则限定
    



--------------------------------------------------
---

- hosts: pull_mode_hosts                    #定义作用的主机,多个主机或者组用:分开.也可以用正则
  remote_user: root                         #定义远端哪个用户来执行, 如果用 '{{ uservar}}' 就可以通过命令行来输入此变量

  vars:                                     # 定义变量. 局部的, 只能在此play里面用

    # schedule is fed directly to cron
    schedule: '*/15 * * * *'

    # User to run ansible-pull as from cron
    cron_user: root

    # File that ansible will use for logs
    logfile: /var/log/ansible-pull.log

    # Directory to where repository will be cloned
    workdir: /var/lib/ansible/local

    # Repository to check out -- YOU MUST CHANGE THIS
    # repo must contain a local.yml file at top level
    #repo_url: git://github.com/sfromm/ansible-playbooks.git
    repo_url: SUPPLY_YOUR_OWN_GIT_URL_HERE

    software:
      - python-setuptools
      - apache2
      - ntpdate

  tasks:                                    # task起始标识,可以定义一个或者多个task

    - name: run this command and ignore the result
      shell: hostname
      ignore_errors: True                   # 模块执行的结果,如果不为0, 不加ingore_erros的话,出现错误,playbook就不继续执行了. 加上后会忽略错误继续
      register: result                      # 把上一个模块执行的结果, 保留在result(名字任意)这个变量里, 常用的有result.stdout, result.err, result.rc等属性.
    - debug: msg='{{result.stdout}}'        # debug打印,把result的stdout打印出来, debug后要遵循msg="这种结构"

    - name: install mysql and apache2
      apt: name={{item}} state=installed    # item是循环的一部分
      sudo: yes                             # 表明sudo只针对当前task有效,要全局有效要放进hosts, remote_user里面
      with_items:                           # ansible的内置循环, 循环变量用{{item}}表似乎, 循环列表在with_items里, 这里用的前面定义的vars里面的变量
       - '{{software}}'
      tags: init                            # 设置标签,当playbook执行的似乎后, 将只执行tags所对应的task

    - name: Install ansible                 # 定义一个名字,这样会在终端打印,不定义会默认打印的提示
      yum: pkg=ansible state=installed

    - name: Create local directory to work from
      file: path={{workdir}} state=directory owner=root group=root mode=0751

    - name: Copy ansible inventory file to client
      copy: src=/etc/ansible/hosts dest=/etc/ansible/hosts
              owner=root group=root mode=0644

    - name: Create crontab entry to clone/pull git repository
      template: src=templates/etc_cron.d_ansible-pull.j2 dest=/etc/cron.d/ansible-pull owner=root group=root mode=0644

    - name: Create logrotate entry for ansible-pull.log
      template: src=templates/etc_logrotate.d_ansible-pull.j2 dest=/etc/logrotate.d/ansible-pull owner=root group=root mode=0644

    - name: transfer apache2 configure file to remote template src=./apache2.j2 dest=/etc/apache2/apache2.conf         # 使用模板, 传送jinja2文件, 也可以用copy模块传递普通文件
      notify:                                                           # 类似触发器, 会等前面的执行完了后, 去执行handlers里面的同一个名字的handler, 并执行匹配到的task
        - restart apache2                       # handlers里面的任务名字
      when: result.stdout == 'testserver'

  handlers:
    - name: restart apache2
      service: name=apache2 state=restarted
--------------------------------------------------
group_vars 文件夹, 存放组变量(组名)和全局变量all
组名需要和主机名字对应起来, all里面变量是全局的

=====ansible 项目规划=========
|-- group_vars
|    `-- 组名
|    `-- all
|-- hosts
|-- roles
|    |
|    -- mysql           # 其中一个role
|        |--handlers
|        |   `-- main.yml
|        |--tasks
|        |   `-- configure.yml
|        |   `-- main.yml
|        |--templates
|        |   `-- my.cnf
|        |--vars            # 这里对应的变量, 只对当前role有作用
|        |   `-- main.yml
|    |--webserver       # 另外一个role
|        |--files           # 存文件的,ansible会默认去这个目录找文件, 对应task里面的copy模块
|        |   `-- index.html
|        |--handlers        # 存放handlers
|        |   `-- main.yml
|        |--meta            # 定义role和role直接的依赖关系 
|        |   `-- main.yml
|        |--tasks           # 存放tasks
|        |   `-- main.yml
|        |--templates       # 存放模板, 对应task里面的模块template
|        |   `-- apache2.conf
|
|-- site.yml

-----------------------
webserver/tasks/main.yml

---
- name: transfer index file
  copy: src=index.html dest=/var/www/index.html    #这里index.html会去file里面查找
  tags: install
- name: wait for aapche2 to restart
  wait_for: port={{http_port}}                  # http_port是来自gruop_vars中的全局变量
  tags: install
- name: transfer apache2 configure file
  template: src=apache2.conf dest=/etc/apache2/apache2.conf     # apache2.conf会到templates里面查找
  tags: conf
  notify:
    - restart apache2
-----------------------
webserver/handlers/main.yml

---
- name: restart apache2
  service: name=apache2 state=restarted         # 定义task完成后要作的处理
-----------------------
webserver/meta/main.yml
---
dependencies:
  - {role: mysql,echo_vars: hello mysql}        # 定义依赖关系, webserver运行前, 必须先运行 这个role,并且传递变量echo_vars给mysql
-----------------------
mysql/tasks/configure.yml
---
- name: transfer mysql configure file
  template: src=my.cnf dest=/etc/mysql/my.cnf
  notify:
    - restart mysql
  tags: configure
-----------------------
mysql/tasks/main.yml
---
- name: install mysql-server
  apt: name={{item}} state=installed
  with_items:
    - '{{software}}'
  tags: install

- name: keep mysql is running
  sevice: name=mysql state=running
  tags: install

- name: echo_vars
  shell: echo '{{echo_vars}}'               # webservers的meta传过来的变量
  register: result
- debug: msg='{{result.stdout}}'
  tags: install

- include: configure.yml                # include进来其它
-----------------------
mysql/handlers/main.yml
---
- name: restart mysql
  service: name=mysql state=restarted
-----------------------
mysql/vars/main.yml
---
software:           # role内置变量
  - mysql-server
  - mysql-client

-----------------------
site.yml  文件就是我们要调用的文件了
---
- hosts: 组名
  remote_user: '{{uservar}}'

  roles:
    - webserver
======================
ansible-playbook -i hosts site.yml -e 'uservar=xxxx' -s
======================
ansible variables 定义
    Inventory(host vars,group vars) playbook里面
    命令行
    playbook执行task过程中产生结果，可以register起来，作为变量给下面的task使用
    roles里面
    来自于nodes上面的facts
-----------------------
inventory hosts 里面的
[组名]
test-server http_port=80        # 主变量
10.0.2.3 ansible_connection=paramiko

[组名:vars]     #组变量
mysql_port=3306
path/ansible/host_vars/组名1     #定义在文件里的主机变量, 文件名要和主机名一致
test1: test2
path/ansible/group_vars/组名    # 定义在文件里的组变量, 文件名要和组名一直
test3:
  - test4
  - ansible

-----------------------
playbook 的变量
---------------
---
 - hosts: all
   user: test2
   vars:
     time: 120              变量
     port: 80
     keeplive: 100
   vars_files:
    - /vars/test.yml        也可以导入外部文件的变量
--------------
yml里面的 '{{变量名}}' 这种变量通过命令行 -e "变量名=xxx 变量名2=xxx2" 来传入
格式也支持json  -e '{"变量名":"xxx", "变量名2":"xxx2"}'
也可以传入参数文件 -e '@test.json' 用@来引入json文件
第四种register task, 作为变量给下面的task使用
第五钟,在roles里面定义vars
-----------------------
task
---
 - hosts: test
   remote_user: test2
   vars:
     list1:
      - 1
      - 2
      - 3
     list2:
      - 2
      - 3
     dic:
      dict1: test11
      dict2: test12
      dict3: 10

   tasks:
    - name: exec some tasks
      shell: abcd                   # 故意错误
      register: result
      ignore_errors: True

    - name: exec the module module_test_tommy
      action: module_test_tommy
      when: result|failed           # 这是jinja2的filter,类似过滤,用|后的方法对变量处理,得到一个新结果, 当failed的时候返回True

    - debug: msg='{{item}}'
      with_items:
        - '{{list1|union(list2)}}'  # 取两个list的合集
      when: dic.dic1|match("li*")   # 判断dic[dic1]的value是否匹配"li*", 匹配返回True, 否则False

    - name: Send file to remote
      template: src=/home/xxx/variables.j2 dest=/tmp/variables
      when: dic.dic3|version_compare(10,'==')       # 比较大小, 判断dic['dic3']是否等于10, 等于返回True

-----------------------
templates
=========
{% if ansible_distribution == 'Debian' %}
{% fo ip in ansible_all_ipv4_addresses %}
{% ip %}
{% endfor %}
{% for value in lists1|difference(list2) %}
{% value %}
{% endfor %}
{% if 'xxx2' in groups['test'] %}               # 用了groups里面的变量
{% module_test_tommy|default(0) %}              # 用到了自定义模块返回的facts, default(0)是设定值
{% hostvars['test2']['ansible_distribution'] %} # 用到hostvars变量
{% endif %}
{% endif %}
=========
playbook常用模块

templates 模块让人设计一个框架式的配置文件.如何把ansible需要的值插入到合适的位置.
    set_fact模块可以让你在远程受管机器上执行脚本的过程中来计算我们需要的值，这些值可以被用在模板或者变量中。这些值有点类似setup模块中的参数，只不过setup模块是以单台主机为单位的。

    - hosts: all
      remote_user: root
      tasks:
       - name: setfact var
         set_fact: var='good'
       - name: template a file with vars
         template: src=../test/config dest=/home/test backup=yes

    ==config start=====
    {{ansible_date_time.time}}
    {{var}}
    ==config end  =====

pause 模块让我们在playbook中暂停一段时间，可以指定一个时间段，或者提示用户继续。在命令行模式中，这没什么用，但是在playbook中，这很有用处。
暂停模块通常被用在当我们需要用户来提供一个确认来继续的时候，或者在一个特殊的时间点手动确认。比如你更新一个web应用程序之后，你需要用户在接受用户的连接之前，手工确认一切Ok。这也可以用来提示用户一些可能出现的问题，并提供选项继续。Ansible会打印出服务器的名字，要求用户确认之后继续。如果在目标选项中设置了串行参数，Ansible会询问组里面的每一个主机。这种方式可以让用户在部署的时候，灵活的控制整个节奏，并监控整个交互过程
     tasks:
      -name: wait for a second
       pause: prompt='please wait'

debug、fail模块
调试模块，在需要调试的地方调用；fail一般配合条件判断使用，当满足某一条件是中止执行。
    tasks:
     - shell: /usr/bin/uptime
       register: result

     - debug: var=result

     - fail: msg="game over"
       when: result|failed
assemble模块
把多个受管主机的文件合并成一个文件，当配置文件不允许包含的时候，这非常有用，特别是在设置root用户的authorized_keys文件的时候。目标文件路径必须存在
    tasks:
     - name: build a new file
       aseemble: src=/home/test dest=/home/test1/c

条件判断
    - hosts: all
      remote_user: root
      tasks:
       - name: register
         command: /usr/bin/uptime
         register: result

       - debug: msg="result|success"
         when: result|success

       - command: echo "hello, '{{var}'}"
         when: var is defined

       - command: echo {{item}}
         with_items: [1,2,3,4,5,6,7]
         when: item:5

register:motd_contents      –将上一步的执行结果赋值给变量motd_contents；
motd_contents.stdout       –将结果输出
motd_contents.stderr         –将错误输出
下面在列举集中条件判断的语法： 
– name: test play
hosts: all
tasks:
– shell: cat /etc/motd           –查看motd文件内容
register: motd_contents       –将内容复制给变量motd_contents
– shell: echo “motd contains the word hi” > /tmp/test2
when: motd_contents.stdout.find(‘hi’) != -1   如果内容中包含字符“hi”执行上面的任务
– name: this command prints FAILED when it fails
command: /usr/bin/example-command -x -y -z
register: command_result
failed_when: “‘FAILED’ in command_result.stderr”  –当上面任务执行结果为failed是中止次脚本。


vars_prompt参数：在执行此任务的时候提示输入参数值，然后继续运行，private选项为yes时，用户输入的值不会显示在屏幕上。
    - hosts: servers
      remote_user: root
      vars:
       - var: 'ok'
      vars_prompt:
       - name: 'var1'
         prompt: 'key'
         private: no

      tasks:
       - name: wait for a second
         pause: prompt='please wait'
       - name: create a file
         copy: dest=/home/c1 content="{{var1}}" backup=yes
如果没有在脚本里给变量赋值，可以直接在执行playbook时在命令行后面直接指定：
ansible-playbook  command_vars.yml -e ‘uservar=”root” echovar=”hello world”‘
ansible-playbook  command_vars.yml -e ‘{“uservar”:”root”, “echovar”:”hello world”}’
{{ some_variable | default(5) }}这个语法的意思是如果变量some_variable没有被赋值默认为5
-----------------------
playbook 里面有
    pre_tasks可以来指定先执行task
    post_task 最后执行这个task
---
- hosts: webservers
  pre_tasks:
    - shell: echo 'hello'      #最先执行
  roles:
    - { role: some_role }      #第二个执行
  tasks:
    - shell: echo 'still busy'
  post_tasks:
    - shell: echo 'goodbye'     #最后执行
-----------------------

ansible-playbook playbook.yml --list-hosts 列出影响的hosts

-----------------------
-----------------------
-----------------------
-----------------------



--------------------------------------------------



