安装pip
安装virtualenv
安装virtualenwrapper
pip install virtualenwrapper
mkdir ~/.virtualenv
export WORKON_HOME=$HOME/.virtualenv
source /usr/local/bin/virtualenvwrapper.sh
mkvirtualenv bom
workon bom

http://192.168.85.123:6543/


cd bom_maintenance/
pip install virtualenv
pip install MySQL-python
pip install -r requirements
    pip install --upgrade -r requirements   

#gvim .bashrc
#export WORKON_HOME=$HOME/.virtualenv
#echo $WORKON_HOME

source /usr/local/bin/virtualenvwrapper.sh
workon bom

cd /home/hyve/bom/bom_maintenance/
python setup.py develop
pserve development.ini 
db configure file:interface_db.py 修改hyve_us_test的帐号密码.


deactivate退出workon虚拟环境


framework
.
├── case
│   ├── case_action
│   │   ├── ActionAttribute.py
│   │   ├── ActionAttribute.pyc
│   │   ├── __init__.py
│   │   └── __init__.pyc
│   ├── case_scenes
│   │   ├── __init__.py
│   │   ├── TestAttribute.py
│   │   └── TestAttribute.pyc
│   ├── __init__.py
│   └── __init__.pyc
├── config
│   ├── ConfigCssXpathElements.py
│   ├── ConfigSelenium.py
│   ├── ConfigSelenium.pyc
│   ├── __init__.py
│   └── __init__.pyc
├── error_png
├── library
│   ├── CommonLib.py
│   ├── CommonLib.pyc
│   ├── HTMLTestRunner
│   │   ├── HTMLTestRunner.py
│   │   ├── HTMLTestRunner.pyc
│   │   ├── README
│   │   ├── sample_test_report.html
│   │   └── test_HTMLTestRunner.py
│   └── __init__.py
├── log
├── README.md
├── report
└── test_all_case.py



testview
==========
mkvirtualenv testview
pip install -r requiredpypkgs.txt
pip install --upgrade -r requiredpypkgs.txt
pip install mysql-python
pip install --upgrade  mysql-python
apt-get install libmysqlclient-dev
apt-get install libffi-dev
apt-get install python-dev  [,python2.7-dev]

python manage.py runserver 192.168.85.123:8765


python manage.py makemigrations #
python manage.py migrate        #
-------
python manage.py shell

=========
pip install ipython
%bg function把 function 放到后台执行，例如: %bg myfunc(x, y,z=1)，之后可以用jobs将其结果取回。myvar = jobs.result(5) 或 myvar =jobs[5].result。另外，jobs.status() 可以查看现有任务的状态。
%ed 或 %edit编辑一个文件并执行，如果只编辑不执行，用 ed -x filename 即可。
%env显示环境变量
%hist 或 %history显示历史记录
%macro name n1-n2 n3-n4 ... n5 .. n6 ...创建一个名称为 name 的宏，执行 name 就是执行 n1-n2 n3-n4 ... n5 .. n6 ...这些代码。
%pwd显示当前目录
%pycat filename用语法高亮显示一个 python 文件(不用加.py后缀名)
%save filename n1-n2 n3-n4 ... n5 .. n6 ...将执行过多代码保存为文件
%time statement计算一段代码的执行时间
%timeit statement自动选择重复和循环次数计算一段代码的执行时间，太方便了。
另外，ipython 中用 ! 表示执行 shell 命令，用 $ 将 python 的变量转化成shell 变量。通过这种两个符号，我们就可以做到和 shell命令之间的交互，可以非常方便地做许多复杂的工作。比如你可以很方便地创建一组目录:
for i in range(10):
s = "dir%s" % i
!mkdir $s
不过写法上还是有一些限制，$ 后面只能跟变量名，不能直接写复杂表达式，$"dir%s"%i 就是错误的写法了，所以要先完全产生python 的变量以后再用。像
for i in !ls: print i
这样的写法也是错的，可以这样:
a = !ls
for i in a: print i
还有一点需要说明，就是执行普通的 shell 命令中如果有 $的话需要用两个 $。比如原来的echo $PATH现在得写成!ec$$PATH。
在较新的ipython版本中，添加了ipython notebook的功能，弥补了ipython shell下代码不易保存等缺点，并且在使用 --pylab inline选项后，可以在代码执行后立即显示运行结果（包括图片，数据表格等），因此在数据分析中运用十分广泛。



=============
CIS-API
pip install requests>=2.6
=============

flask-api
============
pip install flask
pip install flask-restful
============

#/usr/lib/python2.7/dist-packages/


pip freeze | grep xxxx




=========unittest for testview==============

Writing tests
Django的单元测试使用python的unittest模块，这个模块使用基于类的方法来定义测试。类名为django.test.TestCase,继承于python的unittest.TestCase。
from django.test import TestCase
from myapp.models import Animal
  
class AnimalTestCase(TestCase):
    def setUp(self):
        Animal.objects.create(name="lion", sound="roar")
        Animal.objects.create(name="cat", sound="meow")
  
    def test_animals_can_speak(self):
        """Animals that can speak are correctly identified"""
        lion = Animal.objects.get(name="lion")
        cat = Animal.objects.get(name="cat")
        self.assertEqual(lion.speak(), 'The lion says "roar"')
        self.assertEqual(cat.speak(), 'The cat says "meow"')
运行测试的时候，测试程序会在所有以test开头的文件中查找所有的test cases(inittest.TestCase的子类),自动建立测试集然后运行测试。
注意：如果测试是基于数据库访问的(读取、查询Model)，一定要用django.test.TestCase建立测试类，而不要用unittest.TestCase。
Runing tests
执行目录下所有的测试(所有的test*.py文件)：
    $ python manage.py test
执行animals项目下tests包里的测试：
    $ python manage.py test animals.tests
执行animals项目里的test测试：
    $ python manage.py test animals
单独执行某个test case：
    $ python manage.py test animals.tests.AnimalTestCase
单独执行某个测试方法：
    $ python manage.py test animals.tests.AnimalTestCase.test_animals_can_speak
为测试文件提供路径：
    $ python manage.py test animals/
通配测试文件名：
    $ python manage.py test --pattern="tests_*.py"
启用warnings提醒：
    $ python -Wall manage.py test
数据库
测试是需要数据库的，django会为测试单独生成数据库。不管你的测试是否通过,当你所有的测试都执行过后,这个测试数据库就会被销毁。
默认情况下,测试数据库的名字是test_DATABASE_NAME,DATABASE_NAME是你在settings.py里配置的数据库名.如果 你需要给测试数据库一个其他的名字,在settings.py中指定TEST_DATABASE_NAME的值。使用sqlite3时，数据库是在内存中创建的。
除了数据库是单独创建的以外,测试工具会使用相同的数据库配置--DATABASE_ENGINE, DATABASE_USER, DATABASE_HOST等等.创建测试数据库的用户DATABASE_USER(settings中)指定,所以你需要确认 DATABASE_USER有足够的权限去创建数据库。
测试执行顺序
为了保证所有的测试都从干净的数据库开始，执行顺序如下：
1.所有的TestCase子类首先运行。
2.所有其他的单元测试(unittest.TestCase,SimpleTestCase,TransactionTestCase)。
3.其它的测试(例如doctests等)
加速测试
可以将PASSWORD_HASHERS设置为更快的算法：
PASSWORD_HASHERS = (
    'django.contrib.auth.hashers.MD5PasswordHasher',
)


=========process testview=====================
python manage.py makemigrations
python manage.py migrate
python manage.py test --pattern="test_servergi.py"


