#      Title: 
#   FileName: php.snippets
#Description: 
#    Version: 15.1.2
#     Author: rainysia
#      Email: rainysia@gmail.com
#   HomePage: http://www.btroot.org
# CreateTime: 2009-05-22 23:11:59
# LastChange: 2015-01-29 13:39:30
snippet nbs
	&nbsp;${1:}
snippet nbs2
	&nbsp;&nbsp;${1:}
snippet nbs3
	&nbsp;&nbsp;&nbsp;${1:}
# ←
snippet left
	&#x2190;
# →
snippet right
	&#x2192;
# ↑
snippet up
	&#x2191;
# ↓
snippet down
	&#x2193;
# ↩
#&#x21A9;
snippet return
	return ${1};
# ⇤
snippet backtab
	&#x21E4;
# ⇥
snippet tab
	&#x21E5;
# ⇧
snippet shift
	&#x21E7;
# ⌃
snippet control
	&#x2303;
# ⌅
snippet enter
	&#x2305;
# ⌘
snippet command
	&#x2318;
# ⌥
snippet option
	&#x2325;
# ⌦
snippet delete
	&#x2326;
# ⌫
snippet backspace
	&#x232B;
# ⎋
snippet escape
	&#x238B;
snippet php
	<?php
	${1}
snippet phpw
	<?php ${1}?>
snippet echo
	echo ${1:string}${2};
snippet echop
	echo '<pre>';
	 ${1:}
	echo '</pre>';
snippet echopvd
	echo '<pre>';
	var_dump(${1:});
	echo '</pre>';
snippet echoppr
	echo '<pre>';
	print_r (${1:});
	echo '</pre>';
snippet echopprex
	echo '<pre>';
	print_r (${1:});
	echo '</pre>';exit;
snippet echopvdex
	echo '<pre>';
	var_dump(${1:});
	echo '</pre>';exit;
snippet echopvdaex
	echo '<pre>';
	var_dump(array('${1:}' => ));
	echo '</pre>';exit;
snippet echopvpex
	echo '<pre>';
	var_export(array('${1:}' => ), 1);
	echo '</pre>';exit;
snippet elvp
	error_log(var_export(array('${1:}' => ${2}), 1)."\n", 3, "/var/log/php_errors.log");
snippet elvp1
	error_log("#${1:}#"."\n", 3, "/var/log/php_errors.log");
snippet elvpt
	error_log("#".date('Y-m-d H:i:s')."#"."\n", 3, "/var/log/php_errors.log");
	error_log(var_export(array('${1:}' => ${2}), 1)."\n", 3, "/var/log/php_errors.log");
snippet echoh
	echo ${1:string}.'<hr />';
snippet echob
	echo ${1:string}.'<br />';
snippet echo1b
	echo '##111##'.'<br />';
snippet echo2b
	echo '##222##'.'<br />';
snippet echo3b
	echo '##333##'.'<br />';
snippet echo4b
	echo '##444##'.'<br />';
snippet echoex
	echo ${1:string}${2};exit;
snippet $
	$${1:string} = "${2:}";
snippet print
	print (${1:string});
snippet printr
	print_r (${1:string});
snippet vd
	var_dump(${1:});
snippet vdx
	var_dump(${1:});exit;
snippet vda
	var_dump(array('' => ));
snippet include
	include ${1:file};${2}
snippet include1
	include_once ${1:file};${2}
snippet require
	require ${1:file};${2}
snippet require1
	require_once ${1:file};${2}
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet cookie
	$_COOKIE['${1:variable}']${2}
snippet env
	$_ENV['${1:variable}']${2}
snippet files
	$_FILES['${1:variable}']${2}
snippet get
	$_GET['${1:variable}']${2}
snippet post
	$_POST['${1:variable}']${2}
snippet request
	$_REQUEST['${1:variable}']${2}
snippet server
	$_SERVER['${1:variable}']${2}
snippet session
	$_SESSION['${1:variable}']${2}
snippet exit
	exit(${1:string});
# Start Docblock
snippet /*
	/**
	 * ${1}
	 */
#phpunit
snippet phpu
	PHPUnit_Framework_TestCase ${1:}
snippet @de
	@depends ${1}
snippet @dp
	@dataProvider ${1}
snippet @ex
	@expectedException
snippet @exem
	@expectedExceptionMessage
snippet @exec
	@expectedExceptionCode
snippet phpuen
	PHPUnit_Framework_Error_Notice
snippet phpuew
	PHPUnit_Framework_Error_Warning
snippet thrownew
	throw new ${1}
snippet thrownewi
	throw new InvalidArgumentException(${1});
snippet invalid
	InvalidArgumentException
snippet publicft
	public function testException(){

	}

snippet tryif
	try{
		${1}
	}

	catch (InvalidArgumentException $expected) {
		return;${2}
	}

	$this->fail('${3}');
snippet ex
	exception
snippet thissee
	$this->setExpectedException('${1}');
snippet publicftf
	public function testFailingInclude(){
		include '${1}';
	}
# Class - post doc
snippet doc_c
	/**
	 * ${1:Default.Class.Description.}
	 *
	 * @category ${2:}
	 * @package  ${3:}
	 * @author   ${4:`g:snips_author` <`g:snips_email`>}
	 * @license  ${5:`g:snips_license`}
	 * @link     ${6:`g:snips_link`}
	 *
	 */
	class ${7:ClassName}
	{

	}
# Function
snippet doc_
	/**
	 * ${1:Return}.
	 *
	 * @param integer $foo Comments.
	 *
	 * @return ${2:void}
	 */
snippet doc_f
	/**
	 * ${1:Return}.
	 *
	 * @param integer $foo Comments.
	 *
	 * @return ${2:void}
	 */
	${2}function ${2}(${3})
	{
		${7}
	}
snippet doc_pf
	/**
	 * ${1:Return}.
	 *
	 * @param integer $foo Comments.
	 *
	 * @return ${2:void}
	 */
	public ${2}function ${2}(${3})
	{
		${7}
	}
# Header
snippet doc_h
	/**
	 * ${1:ClassName}
	 *
	 * ${2:`g:snips_php_version`}
	 * 
	 * @category   ${2:ClassName}
	 * @package    ${2:Main}
	 * @subpackage ${3:Child}
	 * @author     ${4:`g:snips_author`}
	 * @copyright  ${5:`g:snips_copyright`}
	 * @license    ${6:`g:snips_license`}
	 * @createTime ${7:`strftime('%Y-%m-%d %H:%M:%S %A')`}
	 * @lastTime   ${8:`strftime('%Y-%m-%d %H:%M:%S %A')`}
	 *
	 * @link       ${9:`g:snips_link`}
	 */
snippet class
	class ${1:}
	{

	}
snippet extends
	class ${1:Child} extends ${2:}
	{
		${3:}
	}
snippet clone
	clone $${1:};
snippet static
	static $${1:};
snippet const
	const ${1:};
snippet public
	public $${1:};
snippet private
	private $${1:};
snippet protected
	protected $${1:};
snippet staticpub
	public static $${1:};
snippet staticpri
	private static $${1:};
snippet staticpro
	protect static $${1:};
snippet staticf
	static function ${1:}(${2:})
	{
		${3:}
	}
snippet staticpubf
	public static function ${1:}(${2:})
	{
		${3:}
	}
snippet staticprif
	private static function ${1:}(${2:})
	{
		${3:}
	}
snippet staticprof
	protected static function ${1:}(${2:})
	{
		${3:}
	}
snippet publicf
	public function ${1:}(${2:})
	{
		${3:}
	}
snippet privatef
	private function ${1:}(${2:})
	{
		${3:}
	}
snippet protectedf
	protected function ${1:}(${2:})
	{
		${3:}
	}
snippet constructf
	function __construct(${1:})
	{
		${2:}
	}
snippet destructf
	function __destruct(${1:})
	{
		${2:}
	}
snippet clonef
	function __clone(${1:})
	{
		${2:}
	}
snippet getf
	function __get($${1:})
	{
		${2:}
	}
snippet issetf
	function __isset(${1:})
	{
		${2:}
	}
snippet setf
	function __set($${1:name},$${2:value})
	{
		${3:}
	}
snippet unsetf
	function __unset($${1:name})
	{
		${2:}
	}
snippet callf
	function __call($${1:method_name},$${2:parameters})
	{
		${3:}
	}
snippet sleepf
	function __sleep()
	{
		${1:}
		return ${2:}
	}
snippet wakeupf
	function __wakeup()
	{
		${1:}
	}
snippet tostringf
	function __toString()
	{
		${1:}
	}
snippet autoloadf
	function __autoload(${1:class_name})
	{
		${1:}
	}
snippet parent
	parent::${1:}(${2:});
snippet self
	self::${1:}(${2:});
snippet abstract
	abstract class ${1:}{
		abstract function ${2:abstract_method}(${3:}){
			${4:}
		}
	}
snippet interface
	interface ${1:}
	{
		${2:}
	}
snippet finalf
	final function ${1:}
	{
		${2:}
	}
snippet finalc
	final class ${1:}
	{
		${2:}
	}
snippet implements
	class ${1:} implements ${2:}
	{
		${2:}
	}
snippet new
	$${1:} = new ${2:}();
# define(...)
snippet define
	define('${1}', '${2}');${3}
# defined(...)
snippet def?
	${1}defined('${2}')${3}
snippet while
	while (${1:}) {
		${2:}
	}
# do ... while
snippet do
	do {
		${2:}
	} while (${1:});
snippet if
	if (${1:}) {
		${2:}
	}
snippet ife
	if (${1:}) {
		${2:}
	} else {
		${3:}
	}
	${4}
snippet ifthrow
	if(! ${1:}){
		throw new Exception("");
	}
snippet else
	else {
		${1:}
	}
snippet elseif
	elseif (${1:}) {
		${2:}
	}
snippet try
	try {
		${1:}
	} catch ( Exception $e) {
		die(${2:});
	}
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:}) {
	case '${2:}':
		${3:}
		break;
		${5:}
	default:
		${4:}
		break;
	}
snippet case
	case '${1:}':
		${2:}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4:}
	}
snippet foreach
	foreach ($${1:} as $${2:}) {
		${3:}
	}
snippet foreachv
	foreach ($${1:} as $${2:} => $${3:}) {
		${4:}
	}
snippet function
	function ${1:}(${2:}){
		${3:}
	}
snippet func
	function ${1:}(${2:}){
		${3:}
	}
# $... = array (...)
snippet array
	$${1:} = array('${2}' => ${3});${4}
snippet this
	$this->${1:}
# XHTML Doctype 1.0 Transitional
snippet docxt
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
# XHTML Doctype 1.1
snippet docx
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
	"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
snippet html
	<html>
	${1}
	</html>
snippet xhtml
	<html xmlns="http://www.w3.org/1999/xhtml">
	${1}
	</html>
snippet body
	<body>
		${1}
	</body>
snippet head
	<head>
		<meta http-equiv="content-type" content="text/html; charset=utf-8"`Close()`>
		<title>${1:`substitute(Filename('', 'Page Title'), '^.', '\u&', '')`}</title>
		${2}
	</head>
snippet title
	<title>${1:`substitute(Filename('', 'Page Title'), '^.', '\u&', '')`}</title>${2}
snippet script
	<script type="text/javascript" charset="utf-8">
		${1}
	</script>${2}
snippet scriptsrc
	<script src="${1}.js" type="text/javascript"></script>${2}
snippet style
	<style type="text/css">
		${1:}
	</style>${2}
snippet base
	<base href="${1}" target="${2}"`Close()`>
snippet hr
	<hr`Close()[1:]` />
snippet br
	<br`Close()[1:]` />
snippet div
	<div id="${1:name}">
		${2}
	</div>
snippet divc
	<div class="${1:name}">
		${2}
	</div>
snippet span
	<span>${1:name}</span>
snippet a
	<a>${1:name}</a>
# Embed QT Movie
snippet movie
	<object width="$2" height="$3" classid="clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B"
	 codebase="http://www.apple.com/qtactivex/qtplugin.cab">
		<param name="src" value="$1"`Close()`>
		<param name="controller" value="$4"`Close()`>
		<param name="autoplay" value="$5"`Close()`>
		<embed src="${1:movie.mov}"
			width="${2:320}" height="${3:240}"
			controller="${4:true}" autoplay="${5:true}"
			scale="tofit" cache="true"
			pluginspage="http://www.apple.com/quicktime/download/"
		`Close()[1:]`>
	</object>${6}
snippet fieldset
	<fieldset id="$1">
		<legend>${1:name}</legend>

		${3}
	</fieldset>
snippet form
	<form action="${1:`Filename('$1_submit')`}" method="${2:get}" accept-charset="utf-8">
		${3}

	<p><input type="submit" value="Continue &rarr;"`Close()`></p>
	</form>
snippet h1
	<h1 id="${1:heading}">${2:$1}</h1>
snippet h2
	<h2 id="${1:heading}">${2:$1}</h2>
snippet h3
	<h3 id="${1:heading}">${2:$1}</h3>
snippet p
	<p>${1:content}</p>
snippet input
	<input type="${1:text/submit/hidden/button}" name="${2:some_name}" value="${3}"`Close()` />${4}
snippet label
	<label for="${2:$1}">${1:name}</label><input type="${3:text/submit/hidden/button}" name="${4:$2}" value="${5}" id="${6:$2}"`Close()`>${7}
snippet link
	<link rel="${1:stylesheet}" href="${2:/css/master.css}" type="text/css" media="${3:screen}" charset="utf-8"`Close()`>${4}
snippet mailto
	<a href="mailto:${1:joe@example.com}?subject=${2:feedback}">${3:email me}</a>
snippet meta
	<meta name="${1:name}" content="${2:content}"`Close()` />${3}
snippet opt
	<option value="${1:option}">${2:$1}</option>${3}
snippet optt
	<option>${1:option}</option>${2}
snippet select
	<select name="${1:some_name}" id="${2:$1}">
		<option value="${3:option}">${4:$3}</option>
	</select>${5}
snippet table
	<table border="${1:0}">
		<tr><th>${2:Header}</th></tr>
		<tr><th>${3:Data}</th></tr>
	</table>${4}
snippet textarea
	<textarea name="${1:Name}" rows="${2:8}" cols="${3:40}">${4}</textarea>${5}
snippet th
	<th>${1:name}</th>
# smarty
snippet <
	<%{ ${1:} }%>
snippet $s
	$Smarty -> ${1:}(${2:});
# javascript
snippet jsproto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
snippet jsalert
	alert(${1:});
snippet jsfunc1
	function ${1:function_name} (${2:}) {
		${3:}
	}
snippet jsfunc2
	function(${1}) {${2}};
snippet jsif
	if (${1:true}) {${2}};
snippet jsifelse
	if (${1:true}) {${2}}
	else{${3}};
snippet jst
	${1:/* condition */} ? ${2:a} : ${3:b}
snippet jsswitch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
snippet jscase
	case '${1:case}':
		${2:// code}
		break;
	${3}
snippet jsfor1
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
snippet jsfor2
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	}
snippet jswhile
	while (${1:/* condition */}) {
		${2:/* code */}
	}
snippet jsdo
	do {
		${2:/* code */}
	} while (${1:/* condition */});
snippet jstimeout
	setTimeout(function() {${3}}${2}, ${1:10};
snippet jqvar
	var $${1:name} = $("${2:}");
snippet jsvar
	var ${1:name} = ${2:};
snippet jsgetbi
	document.getElementById("${1:}")
snippet jsgetbt
	document.getElementsByTagName("${1}")
snippet jsgetbc
	document.getElementsByClassName("${1:}")
snippet jsgeta
	getAttribute("${1:}")
snippet jsseta
	setAttribute("${1:}")
snippet jsfor
	for ( var i=0; i < ${1:length}; i++){
		${2:}
	}
snippet jscreatee
	document.createElement("${1:}")
snippet jsaddLoadEvent
	function addLoadEvent(func){
		var oldonload = window.onload;
		if(typeof window.onload != 'function'){
			window.onload = func;
		}else{
			window.onload = function(){
				oldonload();
				func();
			}
		}
	}
snippet jsinsertAfter
	function insertAfter(newElement,targetElement){
		var parent = targetElement.parentNode;
		if(parent.lastChild == targetElement){
			parent.appendChild(newElement);
		}else{
			parent.insertBefore(newElement,targetElement.nextSibling);
		}
	}
snippet jsonload
	windows.onload = function(){
		${1:}
	}
snippet jsappendc
	appendChild(${1:})
snippet jscreatet
	document.createTextNode(${1:})
snippet jsinsertb
	insertBefore(${1:});
# json
snippet jsonget
	document.getElementById("${1:}").innerHTML=JSONObject.${2:}
#html5
snippet html5
	<!DOCTYPE HTML>
	<html>
	<body>
	${1:others}
	/body>
	</html>
	snippet video5
	<video width="${1:name}" height="${2:name}" controls="${3:controls/autoplay/loop/preload}">
		<source src="${3:name}" type="video/ogg">
		Your browser does not support the video tag.
	</video>
snippet audio5
	<audio src="${1:ogg/mp3/wav}" controls="${2:controls/autoplay/loop/preload}">
	</audio>
snippet source5
	<source src="${1:name}" type="${2:audio/video}/${3:ogg/mp4/webm/ogg/mpeg/wav}">
snippet canvas5
	<canvas id="${1:name}" width="${2:}" height="${3:}"></canvas>
	<script type="text/javascript">
	var canvas=document.getElementById('${1:name}');
	</script>
#xml
snippet xml
	<?xml version="1.0" encoding="UTF-8"?>
#mend detail
# 3.8.5 add jsfor                           2012-09-18 17:30:30
# 3.8.6 add jsaddLoadEvent,addAppend        2012-09-19 14:06:52
# 3.8.7 change printf to print_r ,delete '' 2012-09-29 10:07:17
# 3.9.1 add some js shortcut                2012-10-18 11:11:23
# 3.9.2 add echop                           2012-10-26 10:12:35
# 3.9.3 change switch space                 2012-12-07 13:59:41
# 3.9.4 add echoh echob                     2013-03-12 10:58:17
# 4.0.1 add echopvd echoppr                 2013-04-17 13:57:20
# 4.0.2 fix define                          2013-05-03 16:09:56
# 6.0.1 add nbs2 nbs3                       2013-06-06 15:00:28
# 6.0.2 add exit                            2013-06-24 14:48:28
# 7.0.1 add vdx,echoex,echopvdex            2013-07-18 15:32:22
#10.0.1 fix some php format                 2013-10-22 18:14:48
#10.0.2 fix some php format,add staticp*f   2013-10-23 10:52:57
#10.0.3 add phpu                            2013-10-24 16:33:26
#11.0.1 change php format                   2013-11-01 14:56:23
#11.0.2,3 change static at the end          2013-11-01 17:49:45
#11.0.4 add issetf                          2013-11-06 11:48:37
#11.0.5 fix try add space                   2013-11-07 18:13:24
#12.0.1 add echo1b echo2b ...               2013-12-19 10:30:43
#13.0.1 add echopvpex,elvp1,elvp,echopvdaex 2014-01-26 13:54:37
#13.0.2 add vda                             2014-01-26 14:19:51
#13.0.3 add echopprex                       2014-01-27 13:52:26
#14.7.1 add doc_pf                          2014-07-02 11:04:10
#14.8.1 add doc_                            2014-08-12 13:38:56
#15.1.1 add foreachv                        2015-01-09 09:55:26
#15.1.2 add new class/doc_h                 2015-01-29 13:39:27
